/**************************************************************
  This file was generated by FileConcatenator.
  It combined all classes in the project to work in Codingame.
  This hasn't been put in a namespace to allow for class 
  name duplicates.
***************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Text;
using System.Drawing;
using System.Dynamic;


public class ActionManager
{
    private readonly bool _player1;
    private readonly List<PossibleAction> _possibleActions = new List<PossibleAction>();

    private int _mana;

    public ActionManager(bool player1)
    {
        _player1 = player1;
    }

    internal string[] GetBestActions()
    {
        var actions = new string[3];

        PerformManaChecks();

        var playerOffset = _player1 ? 0 : 3;

        var idOfEntityBeingControlled = -1;





        for (var i = 0; i < 3; i++)
        {
            var bestAction = _possibleActions.Where(a => a.HeroId == i + playerOffset)
                                             .OrderByDescending(a => a.Priority)
                                             .FirstOrDefault();

            if (bestAction != null)
            {
                // This is a very crude attempt at not controlling the same entity twice
                if (idOfEntityBeingControlled != -1)
                {
                    if (bestAction.ActionType == ActionType.ControlSpell && bestAction.TargetId == idOfEntityBeingControlled)
                    {
                        _possibleActions.Remove(bestAction);

                        bestAction = _possibleActions.Where(a => a.HeroId == i + playerOffset)
                                                     .OrderByDescending(a => a.Priority)
                                                     .FirstOrDefault();
                    }
                }
                else
                {
                    if (bestAction.ActionType == ActionType.ControlSpell)
                    {
                        idOfEntityBeingControlled = bestAction.TargetId.Value;
                    }
                }

                actions[i] = GetActionString(bestAction);
            }
            else
            {
                actions[i] = "WAIT";
            }
        }

        return actions;
    }

    private void PerformManaChecks()
    {
        var manaLeft = _mana;

        var allHeroActions = new List<PossibleAction>[3];

        // Split actions into different heroes
        var playerOffset = _player1 ? 0 : 3;

        Debugger.DisplayPossibleAction(_possibleActions, playerOffset);

        for (var i = 0; i < 3; i++)
        {
            allHeroActions[i] = _possibleActions.Where(a => a.HeroId == i + playerOffset)
                                                .OrderByDescending(a => a.Priority)
                                                .ToList();
        }

        // Work out how many spells we have to get rid of
        var possibleSpellCount = 3;

        if (manaLeft < 10)
        {
            possibleSpellCount = 0;
        }
        else if (manaLeft < 20)
        {
            possibleSpellCount = 1;
        }
        else if (manaLeft < 30)
        {
            possibleSpellCount = 2;
        }

        if (possibleSpellCount != 3)
        {
            var numberOfSpellsAsFirstChoice = 0;

            var currentMax = new int[3];
            var nonSpellMax = new int[3];
            var canRemoveSpell = new bool[3];

            for (var i = 0; i < 3; i++)
            {
                var allPossibleActions = allHeroActions[i];

                var highestPriorityAction = allPossibleActions.First();

                currentMax[i] = highestPriorityAction.Priority;
                canRemoveSpell[i] = highestPriorityAction.ActionType != ActionType.Move;

                if (canRemoveSpell[i])
                {
                    nonSpellMax[i] = allPossibleActions.Where(a => a.ActionType == ActionType.Move)
                                                       .OrderByDescending(a => a.Priority)
                                                       .First()
                                                       .Priority;

                    numberOfSpellsAsFirstChoice++;
                }
            }

            // Remove spells
            Console.Error.WriteLine($"numberOfSpellsAsFirstChoice:{numberOfSpellsAsFirstChoice}");
            Console.Error.WriteLine($"possibleSpellCount:{possibleSpellCount}");

            while (numberOfSpellsAsFirstChoice > possibleSpellCount)
            {
                var highestIndex = 0;
                var highestValue = int.MinValue;

                if (canRemoveSpell[0])
                {
                    var total = nonSpellMax[0] + currentMax[1] + currentMax[2];

                    if (total > highestValue)
                    {
                        highestValue = total;
                        highestIndex = 0;
                    }
                }

                if (canRemoveSpell[1])
                {
                    var total =  currentMax[0] + nonSpellMax[1] + currentMax[2];

                    if (total > highestValue)
                    {
                        highestValue = total;
                        highestIndex = 1;
                    }
                }

                if (canRemoveSpell[2])
                {
                    var total =  currentMax[0] + currentMax[1] + nonSpellMax[2];

                    if (total > highestValue)
                    {
                        highestValue = total;
                        highestIndex = 2;
                    }
                }

                currentMax[highestIndex] = nonSpellMax[highestIndex];
                canRemoveSpell[highestIndex] = false;

                _possibleActions.RemoveAll(a => a.HeroId == highestIndex + playerOffset
                                                             && a.ActionType != ActionType.Move);

                numberOfSpellsAsFirstChoice--;
            }
        }

        Debugger.DisplayPossibleAction(_possibleActions, playerOffset);
    }

    private static string GetActionString(PossibleAction? bestAction)
    {
        var stringBuilder = new StringBuilder();

        stringBuilder.Append($"{GetActionType(bestAction.ActionType)} ");

        if (bestAction.ActionType == ActionType.ShieldSpell
            || bestAction.ActionType == ActionType.ControlSpell)
        {
            stringBuilder.Append($"{bestAction.TargetId} ");
        }

        if (bestAction.ActionType == ActionType.Move
            || bestAction.ActionType == ActionType.ControlSpell
            || bestAction.ActionType == ActionType.WindSpell)
        {
            stringBuilder.Append($"{bestAction.TargetXPos} {bestAction.TargetYPos}");
        }

        return stringBuilder.ToString();
    }

    private static string GetActionType(ActionType actionType)
    {
        switch (actionType)
        {
            case ActionType.Move:
                return "MOVE";
            case ActionType.ControlSpell:
                return "SPELL CONTROL";
            case ActionType.ShieldSpell:
                return "SPELL SHIELD";
            case ActionType.WindSpell:
                return "SPELL WIND";
            default:
                return "Incorrect action type";
        }
    }

    internal void ClearPossibleActions()
    {
        _possibleActions.Clear();
    }

    internal void AddPossibleAction(int heroId, int priority, ActionType actionType, EntityType entityType, int? targetId, int? targetXPos, int? targetYPos)
    {
        _possibleActions.Add(new PossibleAction(heroId, priority, actionType, entityType, targetId, targetXPos, targetYPos));
    }

    public void SetMana(int playerMana)
    {
        _mana = playerMana;
    }
}


internal enum ActionType
{
    Move,
    ControlSpell,
    ShieldSpell,
    WindSpell
}

internal static class Debugger
{
    internal static void DisplayMonsters(List<Monster> monsters)
    {
        Console.Error.WriteLine("Monsters");
        Console.Error.WriteLine("------------------------");

        foreach (var monster in monsters)
        {
            Console.Error.WriteLine($"{monster.Id}: Position-{monster.Position.X},{monster.Position.Y} - ThreatFor:{monster.ThreatFor} - IsControlled={monster.IsControlled} - near base:{monster.NearBase} - ThreatFor:{monster.ThreatFor}");
        }

        Console.Error.WriteLine("------------------------");
    }

    internal static void DisplayPlayerHeroes(List<Hero> heroes)
    {
        Console.Error.WriteLine("Player heroes");
        Console.Error.WriteLine("------------------------");

        foreach (var hero in heroes)
        {
            Console.Error.WriteLine($"{hero.Id}: Postion:({hero.Position.X},{hero.Position.Y}) - Current monster:{hero.CurrentMonster} - isShielding:{hero.IsShielding}");
        }

        Console.Error.WriteLine("------------------------");
    }

    internal static void DisplayEnemyHeroes(List<Hero> heroes)
    {
        Console.Error.WriteLine("Enemy heroes");
        Console.Error.WriteLine("------------------------");

        foreach (var hero in heroes)
        {
            Console.Error.WriteLine($"{hero.Id}: {hero.Position.X}, {hero.Position.Y}");
        }

        Console.Error.WriteLine("------------------------");
    }

    internal static void DisplayPossibleAction(List<PossibleAction> possibleActions, int playerOffset)
    {
        Console.Error.WriteLine("Possible actions");
        Console.Error.WriteLine("------------------------");

        for (var i = 0; i < 3; i++)
        {
            Console.Error.WriteLine($"Hero {i + playerOffset}");

            var heroActions = possibleActions.Where(a => a.HeroId == i + playerOffset)
                                                                       .OrderByDescending(a => a.Priority);

            foreach (var action in heroActions)
            {
                Console.Error.WriteLine($"{action.Priority}:{action.ActionType} {action.EntityType} {action.TargetId} {action.TargetXPos} {action.TargetYPos}");
            }
        }

        Console.Error.WriteLine("------------------------");
    }
}


internal enum EntityType
{
    None,
    Hero,
    Enemy,
    Monster
}


internal class Game
{
    private readonly Point _playerBaseLocation;
    private readonly Point _enemyBaseLocation;
    private readonly int _heroesPerPlayer;

    private readonly ActionManager _actionManager;
    private readonly ValuesProvider _valuesProvider;
    private readonly MovementGenerator _movementGenerator;
    private readonly SpellGenerator _spellGenerator;
    private readonly GuardPointGenerator _guardPointGenerator;

    private bool _inCollectionPhase = true;
    private bool alreadyAttacked = false;

    private readonly List<Hero> _playerHeroes = new List<Hero>();

    private bool _weGotADefenderController; // If our opponent likes to control our defenders make sure they're always shielded
    private bool _weGotAnAttackerController; // If our opponent likes to control our attackers make sure they're always shielded

    private readonly List<Strategy> _defaultStrategies = new List<Strategy>(0);

    internal Game(Point playerBaseLocation, int heroesPerPlayer)
    {
        _playerBaseLocation = playerBaseLocation;
        _heroesPerPlayer = heroesPerPlayer;

        _valuesProvider = new ValuesProvider();

        if (playerBaseLocation.X == 0)
        {
            _enemyBaseLocation = new Point(_valuesProvider.XMax, _valuesProvider.YMax);
            _actionManager = new ActionManager(true);
        }
        else
        {
            _enemyBaseLocation = new Point(0, 0);
            _actionManager = new ActionManager(false);
        }

        _movementGenerator = new MovementGenerator(_playerBaseLocation,
                                                   _enemyBaseLocation,
                                                   _valuesProvider);

        _spellGenerator = new SpellGenerator(_playerBaseLocation,
                                             _enemyBaseLocation,
                                             _valuesProvider);

        _guardPointGenerator = new GuardPointGenerator(_playerBaseLocation, _valuesProvider);

        _defaultStrategies.Add(Strategy.Defend);
        _defaultStrategies.Add(Strategy.Defend);
        _defaultStrategies.Add(Strategy.Collect);
    }

    internal string[] GetMoves(IReadOnlyCollection<Hero> enemyHeroes, List<Monster> monsters, int playerMana)
    {
        _actionManager.ClearPossibleActions();
        _actionManager.SetMana(playerMana);

        var moves = new string[_heroesPerPlayer];

        ResetHeroes();

        CheckForPhaseChange(playerMana);

        if (_playerHeroes[0].GetNumberOfGuardPoints() == 0) // or we've changed a Strategy
        {
            var guardPoints = _guardPointGenerator.GetGuardPoints(_playerHeroes);

            for (var i = 0; i < _playerHeroes.Count; i++)
            {
                var hero = _playerHeroes[i];
                hero.SetGuardPoints(guardPoints[i]);
            }
        }

        CheckForController();
        ClearStaleAttacks(monsters);

        _movementGenerator.AssignHeroMovement(_playerHeroes, monsters, _actionManager);

        if (_weGotADefenderController)
        {
            _spellGenerator.CastProtectiveShieldSpells(_playerHeroes, Strategy.Defend, _actionManager);
        }

        if (_weGotAnAttackerController)
        {
            _spellGenerator.CastProtectiveShieldSpells(_playerHeroes, Strategy.Attack, _actionManager);
        }

        _spellGenerator.AssignDefensiveWindSpell(_playerHeroes, monsters, _actionManager);

        if (!_inCollectionPhase)
        {
            if (playerMana > 100)
            {
                _spellGenerator.AssignDefenderControlSpells(_playerHeroes, monsters, _actionManager);
            }

            _spellGenerator.AssignAttackSpells(_playerHeroes, enemyHeroes, monsters, _actionManager);
        }

        return _actionManager.GetBestActions();
    }

    private void ResetHeroes()
    {
        foreach (var hero in _playerHeroes)
        {
            hero.IsShielding = false;
        }
    }

    private void CheckForPhaseChange(int mana)
    {
        if (_inCollectionPhase)
        {

            if(mana > 300 || (alreadyAttacked && mana > 100))
            {
                _inCollectionPhase = false;
                alreadyAttacked = true;

                ClearGuardPoints();
                ChangeCollectorToAttacker();
            }
        }
        else
        {
            if(mana <= 10)
            {
                _inCollectionPhase = true;

                ClearGuardPoints();
                ChangeAttackerToCollector();
            }
        }
    }

    private void ClearGuardPoints()
    {
        foreach (var hero in _playerHeroes)
        {
            hero.ClearGuardPoints();
        }
    }

    private void ChangeCollectorToAttacker()
    {
        var heroes = _playerHeroes.Where(h => h.Strategy == Strategy.Collect);

        foreach (var hero in heroes)
        {
            hero.Strategy = Strategy.Attack;
        }
    }

    private void ChangeAttackerToCollector()
    {
        var heroes = _playerHeroes.Where(h => h.Strategy == Strategy.Attack);

        foreach (var hero in heroes)
        {
            hero.Strategy = Strategy.Collect;
        }
    }

    private void CheckForController()
    {
        if (!_weGotADefenderController && _playerHeroes.Any(h => h.IsControlled && h.Strategy == Strategy.Defend))
        {
            _weGotADefenderController = true;
        }

        if (!_weGotAnAttackerController && _playerHeroes.Any(h => h.IsControlled && h.Strategy == Strategy.Attack))
        {
            _weGotAnAttackerController = true;
        }
    }

    private void ClearStaleAttacks(IReadOnlyCollection<Monster> monsters)
    {
        ClearDeadMonsters(monsters);

        ClearMonstersIfDefenderIsTooFarAway();
        ClearMonstersIfTheyreAThreatForTheEnemy(monsters);

        ClearMonstersFromEnemyOutskirts(monsters);
    }

    private static double CalculateDistance(Point position, Point position2)
    {
        return Math.Sqrt(Math.Pow(position.X - position2.X, 2)
                         + Math.Pow(position.Y - position2.Y, 2));
    }

    private void ClearDeadMonsters(IReadOnlyCollection<Monster> monsters)
    {
        foreach (var hero in _playerHeroes)
        {
            if (hero.CurrentMonster >= 0)
            {
                if (!monsters.Any(m => m.Id == hero.CurrentMonster))
                {
                    hero.CurrentMonster = -1;
                }
            }
        }
    }

    private void ClearMonstersIfDefenderIsTooFarAway()
    {
        foreach (var hero in _playerHeroes.Where(h => h.Strategy == Strategy.Defend))
        {
            if (hero.CurrentMonster >= 0)
            {
                if (CalculateDistance(hero.Position, _playerBaseLocation) > _valuesProvider.MaxDefenderDistanceFromBase)
                {
                    hero.CurrentMonster = -1;
                }
            }
        }
    }

    private void ClearMonstersIfTheyreAThreatForTheEnemy(IReadOnlyCollection<Monster> monsters)
    {
        foreach (var hero in _playerHeroes)
        {
            if (hero.CurrentMonster >= 0)
            {
                if (monsters.Any(m => m.Id == hero.CurrentMonster && m.ThreatFor == ThreatFor.Enemy))
                {
                    hero.CurrentMonster = -1;
                }
            }
        }
    }

    private void ClearMonstersFromEnemyOutskirts(IReadOnlyCollection<Monster> monsters)
    {
        foreach (var hero in _playerHeroes.Where(h => h.Strategy == Strategy.Attack))
        {
            if (hero.CurrentMonster >= 0)
            {
                var currentMonster = monsters.First(m => m.Id == hero.CurrentMonster);

                if (CalculateDistance(currentMonster.Position, _enemyBaseLocation) < _valuesProvider.OutskirtsMinDist
                    || CalculateDistance(currentMonster.Position, _enemyBaseLocation) > _valuesProvider.OutskirtsMaxDist)
                {
                    hero.CurrentMonster = -1;
                }
            }
        }
    }

    internal void UpdatePlayerHero(Hero hero)
    {
        var playerHero = _playerHeroes.SingleOrDefault(h => h.Id == hero.Id);

        if (playerHero == null)
        {
            // Assign a strategy
            Console.Error.WriteLine($"Assigning strategy {_defaultStrategies[_playerHeroes.Count]}");
            hero.Strategy = _defaultStrategies[_playerHeroes.Count];

            _playerHeroes.Add(hero);
        }
        else
        {
            playerHero.Position = hero.Position;
            playerHero.IsControlled = hero.IsControlled;
            playerHero.ShieldLife = hero.ShieldLife;
        }
    }
}


internal sealed class GuardPointGenerator
{
    private readonly Point _playerBaseLocation;
    private readonly ValuesProvider _valuesProvider;

    public GuardPointGenerator(Point playerBaseLocation, ValuesProvider valuesProvider)
    {
        _playerBaseLocation = playerBaseLocation;
        _valuesProvider = valuesProvider;
    }

    internal List<List<Point>> GetGuardPoints(List<Hero> playerHeroes)
    {
        var guardPoints = new List<List<Point>>();


        guardPoints.AddRange(GetDefenders(playerHeroes));

        guardPoints.AddRange(GetCollectors(playerHeroes));

        guardPoints.AddRange(GetAttackers(playerHeroes));

        // Set guard points
        if (playerHeroes.Count != guardPoints.Count)
        {
            Console.Error.WriteLine("ERROR: Player heroes count doesn't match guard point count");
        }

        // At some point we need to make sure we move heroes around to minimise travel to new spots

        return guardPoints;
    }

    private List<List<Point>> GetDefenders(List<Hero> playerHeroes)
    {
        var numberOfDefenders = playerHeroes.Count(h => h.Strategy == Strategy.Defend);

        var defendPoints = new List<List<Point>>();

        if (numberOfDefenders == 1)
        {
            if (_playerBaseLocation.X == 0)
            {
                defendPoints.Add(new List<Point> { new Point(4000, 4000) });
            }
            else
            {
                defendPoints.Add(new List<Point> { new Point(_valuesProvider.XMax - 4000, _valuesProvider.YMax - 4000) });
            }
        }
        else if (numberOfDefenders == 2)
        {
            if (_playerBaseLocation.X == 0)
            {
                defendPoints.Add(new List<Point>
                {
                    new Point(5700, 2500),
                    new Point(8000, 2000),
                    new Point(6500, 4500)
                });
                defendPoints.Add(new List<Point>
                {
                    new Point(2500, 5700),
                    new Point(4500, 6500),
                    new Point(2000, 8000)
                });
            }
            else
            {
                defendPoints.Add(new List<Point>
                {
                    new Point(_valuesProvider.XMax - 5700, _valuesProvider.YMax - 2500),
                    new Point(_valuesProvider.XMax - 8000, _valuesProvider.YMax - 2000),
                    new Point(_valuesProvider.XMax - 6500, _valuesProvider.YMax - 4500)
                });
                defendPoints.Add(new List<Point>
                {
                    new Point(_valuesProvider.XMax - 2500, _valuesProvider.YMax - 5700),
                    new Point(_valuesProvider.XMax - 4500, _valuesProvider.YMax - 6500),
                    new Point(_valuesProvider.XMax - 2000, _valuesProvider.YMax - 8000)
                });
            }
        }
        else if (numberOfDefenders == 3)
        {
            if (_playerBaseLocation.X == 0)
            {
                defendPoints.Add(new List<Point> { new Point(5000, 2000) });
                defendPoints.Add(new List<Point> { new Point(4000, 4000) });
                defendPoints.Add(new List<Point> { new Point(2000, 5000) });
            }
            else
            {
                defendPoints.Add(new List<Point> { new Point(_valuesProvider.XMax - 5000, _valuesProvider.YMax - 2000) });
                defendPoints.Add(new List<Point> { new Point(_valuesProvider.XMax - 4000, _valuesProvider.YMax - 4000) });
                defendPoints.Add(new List<Point> { new Point(_valuesProvider.XMax - 2000, _valuesProvider.YMax - 5000) });
            }
        }

        return defendPoints;
    }

    private IEnumerable<List<Point>> GetCollectors(List<Hero> playerHeroes)
    {
        var numberOfCollectors = playerHeroes.Count(h => h.Strategy == Strategy.Collect);

        var collectPoints = new List<List<Point>>();

        if (numberOfCollectors == 1)
        {
            if (_playerBaseLocation.X == 0)
            {
                collectPoints.Add(new List<Point>
                {
                    new Point(_valuesProvider.XMax / 2, _valuesProvider.YMax / 2),
                    new Point(10000, 6000),
                    new Point(_valuesProvider.XMax / 2, _valuesProvider.YMax / 2),
                    new Point(12000, 3000)
                });
            }
            else
            {
                collectPoints.Add(new List<Point>
                {
                    new Point(_valuesProvider.XMax / 2, _valuesProvider.YMax / 2),
                    new Point(_valuesProvider.XMax - 10000, _valuesProvider.YMax - 6000),
                    new Point(_valuesProvider.XMax / 2, _valuesProvider.YMax / 2),
                    new Point(_valuesProvider.XMax - 12000, _valuesProvider.YMax - 3000)
                });
            }
        }

        return collectPoints;
    }

    private List<List<Point>> GetAttackers(List<Hero> playerHeroes)
    {
        var numberOfAttackers = playerHeroes.Count(h => h.Strategy == Strategy.Attack);

        var attackPoints = new List<List<Point>>();

        if (numberOfAttackers == 1)
        {
            if (_playerBaseLocation.X == 0)
            {
                attackPoints.Add(new List<Point>
                {
                    new Point(_valuesProvider.XMax - 3000, _valuesProvider.YMax - 2500),
                    new Point(_valuesProvider.XMax - 4500, _valuesProvider.YMax - 3500),
                    new Point(_valuesProvider.XMax - 3000, _valuesProvider.YMax - 2500),
                    new Point(_valuesProvider.XMax - 2500, _valuesProvider.YMax - 2000),
                });
            }
            else
            {
                attackPoints.Add(new List<Point>
                {
                    new Point(3000, 2500),
                    new Point(4500, 3500),
                    new Point(3000, 2500),
                    new Point(2500, 2000),

                });
            }
        }

        return attackPoints;
    }

}


internal sealed class Hero
{
    private int _currentGuardPoint = 0;
    private List<Point> _guardPoints;

    internal int Id { get; }
    internal Point Position { get; set; }

    internal int CurrentMonster { get; set; } = -1;

    internal bool IsControlled { get; set; }

    internal int ShieldLife { get; set; }

    internal Strategy Strategy { get; set;} = Strategy.Defend;

    internal  bool IsShielding { get; set; }

    internal Hero(int id, Point position, bool isControlled, int shieldLife)
    {
        Id = id;
        Position = position;
        IsControlled = isControlled;
        ShieldLife = shieldLife;

        _guardPoints = new List<Point>();
    }


    internal void SetGuardPoints(List<Point> guardPoints)
    {
        _guardPoints = new List<Point>(guardPoints);
        _currentGuardPoint = 0;
    }

    internal Point GetCurrentGuardPoint()
    {
        return new Point(_guardPoints[_currentGuardPoint].X, _guardPoints[_currentGuardPoint].Y);
    }

    internal Point GetNextGuardPoint()
    {
        if (_currentGuardPoint >= _guardPoints.Count - 1)
        {
            _currentGuardPoint = 0;
        }
        else
        {
            _currentGuardPoint++;
        }

        return new Point(_guardPoints[_currentGuardPoint].X, _guardPoints[_currentGuardPoint].Y);
    }

    internal int GetNumberOfGuardPoints()
    {
        return _guardPoints.Count;
    }

    internal void ClearGuardPoints()
    {
        _guardPoints = new List<Point>();
        _currentGuardPoint = 0;
    }
}


internal sealed class Monster
{
    public int Id { get; }
    public Point Position { get; }
    public int Health { get; }
    public int SpeedX { get; }
    public int SpeedY { get; }
    public bool NearBase { get; }
    public ThreatFor ThreatFor { get; }
    public int ShieldLife { get; }
    public bool IsControlled { get; }
    
    public Monster(int id, Point position, int health, int speedX, int speedY, bool nearBase, ThreatFor threatFor, bool isControlled, int shieldLife)
    {
        Id = id;
        Position = position;
        Health = health;
        SpeedX = speedX;
        SpeedY = speedY;
        NearBase = nearBase;
        ThreatFor = threatFor;
        IsControlled = isControlled;
        ShieldLife = shieldLife;
    }
}


internal sealed class MovementGenerator
{
    private readonly Point _playerBaseLocation;
    private readonly Point _enemyBaseLocation;
    private readonly ValuesProvider _valuesProvider;

    public MovementGenerator(Point playerBaseLocation,
                             Point enemyBaseLocation,
                             ValuesProvider valuesProvider)
    {
        _playerBaseLocation = playerBaseLocation;
        _enemyBaseLocation = enemyBaseLocation;
        _valuesProvider = valuesProvider;
    }

    internal void AssignHeroMovement(List<Hero> playerHeroes, List<Monster> monsters, ActionManager actionManager)
    {
        var defendingHeroesOutsideOfBase = playerHeroes.Where(h => h.Strategy == Strategy.Defend
                                                                                   && CalculateDistance(h.Position, _playerBaseLocation) > _valuesProvider.BaseRadius);

        foreach (var defendingHeroOutsideOfBase in defendingHeroesOutsideOfBase)
        {
            defendingHeroOutsideOfBase.CurrentMonster = -1;
        }

        CalculateDefenderMovement(playerHeroes, monsters);

        CalculateCollectorMovement(playerHeroes, monsters);

        CalculateAttackerMovement(playerHeroes, monsters);

        // Assign actions
        foreach (var hero in playerHeroes)
        {
            if (hero.CurrentMonster != -1)
            {
                var monsterToAttack = monsters.Single(m => m.Id == hero.CurrentMonster);

                actionManager.AddPossibleAction(hero.Id, 0, ActionType.Move, EntityType.None, null, monsterToAttack.Position.X, monsterToAttack.Position.Y);
            }
            else
            {
                var currentGuardPoint = hero.GetCurrentGuardPoint();

                if (!(hero.Position.X == currentGuardPoint.X && hero.Position.Y == currentGuardPoint.Y))
                {
                    actionManager.AddPossibleAction(hero.Id, 0, ActionType.Move, EntityType.None, null, currentGuardPoint.X, currentGuardPoint.Y);
                }
                else
                {
                    var nextGuardPoint = hero.GetNextGuardPoint();
                    actionManager.AddPossibleAction(hero.Id, 0, ActionType.Move, EntityType.None, null, nextGuardPoint.X, nextGuardPoint.Y);
                }
            }
        }
    }

    private void CalculateAttackerMovement(IEnumerable<Hero> playerHeroes, IEnumerable<Monster> monsters)
    {
        var freeAttackingHeroes = playerHeroes.Where(h => h.Strategy == Strategy.Attack && h.CurrentMonster == -1).ToList();

        if (freeAttackingHeroes.Count <= 0)
        {
            return;
        }

        // Get any monsters on the edge of the enemies base
        var monstersOnOutskirts = monsters.Where(m => CalculateDistance(m.Position, _enemyBaseLocation) > _valuesProvider.OutskirtsMinDist
                                                      && CalculateDistance(m.Position, _enemyBaseLocation) < _valuesProvider.OutskirtsMaxDist).ToList();

        // Go to them
        if (monstersOnOutskirts.Count > 1)
        {
            foreach (var freeAttackingHero in freeAttackingHeroes)
            {
                var closestMonster = monstersOnOutskirts.OrderBy(m => CalculateDistance(freeAttackingHero.Position, m.Position))
                                                        .First();

                freeAttackingHero.CurrentMonster = closestMonster.Id;
            }
        }
    }

    private void CalculateDefenderMovement(IReadOnlyCollection<Hero> playerHeroes, List<Monster> monsters)
    {
        // if a hero is not in the base, and a spider is, drop everything and defend
        var monstersThreateningBase = monsters.Where(m => m.ThreatFor == ThreatFor.Player
                                                                         && CalculateDistance(m.Position, _playerBaseLocation) <= 6000)
                                                         .OrderBy(m => CalculateDistance(m.Position, _playerBaseLocation))
                                                         .ToList();

        var freeDefendingHeroes = playerHeroes.Where(h => h.Strategy == Strategy.Defend && h.CurrentMonster == -1).ToList();

        if (monstersThreateningBase.Count == 0 && freeDefendingHeroes.Count <= 0)
        {
            return;
        }

        if (monstersThreateningBase.Count > 0)
        {
            var closestMonster = monstersThreateningBase.First();

            foreach (var hero in freeDefendingHeroes)
            {
                hero.CurrentMonster = closestMonster.Id;
            }
        }
        else
        {
            foreach (var freeDefendingHero in freeDefendingHeroes)
            {
                var monsterWithinRange = monsters.Where(m => CalculateDistance(m.Position, _playerBaseLocation) <= _valuesProvider.MaxDefenderDistanceFromBase
                                                             && m.ThreatFor != ThreatFor.Enemy)
                                                 .Select(m => new { m, distance = CalculateDistance(m.Position, freeDefendingHero.Position) })
                                                 .Where(m => m.distance <= _valuesProvider.HeroRange)
                                                 .OrderBy(m => m.distance)
                                                 .Select(m => m.m)
                                                 .FirstOrDefault();

                if (monsterWithinRange != null)
                {
                    freeDefendingHero.CurrentMonster = monsterWithinRange.Id;
                }
            }
        }
    }

    private void CalculateCollectorMovement(IEnumerable<Hero> playerHeroes, IEnumerable<Monster> monsters)
    {

        var collectingHeroes = playerHeroes.Where(h => h.Strategy == Strategy.Collect && h.CurrentMonster == -1).ToList();

        if (collectingHeroes.Count > 0)
        {
            foreach (var collectingHero in collectingHeroes)
            {
                var closestMonster = monsters.Where(m => CalculateDistance(m.Position, _playerBaseLocation) > _valuesProvider.OutskirtsMaxDist)
                                             .Select(m => new { m, distance = CalculateDistance(m.Position, collectingHero.Position) })
                                             .Where(m => m.distance <= _valuesProvider.HeroRange)
                                             .OrderBy(m => m.distance)
                                             .Select(m => m.m)
                                             .FirstOrDefault();

                if (closestMonster != null)
                {
                    collectingHero.CurrentMonster = closestMonster.Id;
                }
            }
        }
    }

    private static double CalculateDistance(Point position, Point position2)
    {
        return Math.Sqrt(Math.Pow(position.X - position2.X, 2)
                         + Math.Pow(position.Y - position2.Y, 2));
    }
}



/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
internal sealed class Player
{
    static void Main(string[] args)
    {
        string[] inputs;
        inputs = Console.ReadLine().Split(' ');

        var baseX = int.Parse(inputs[0]); // The corner of the map representing your base
        var baseY = int.Parse(inputs[1]);
        var heroesPerPlayer = int.Parse(Console.ReadLine()); // Always 3

        var game = new Game(new Point(baseX, baseY), heroesPerPlayer);

        // game loop
        while (true)
        {
            // Don't bother persisting monsters. It's quicker just to re-add them every time.
            // At least until we need to persist them
            var enemyHeroes = new List<Hero>();
            var monsters = new List<Monster>();

            // Player base stats
            inputs = Console.ReadLine().Split(' ');
            var playerBaseHealth = int.Parse(inputs[0]); // Your base health
            var playerMana = int.Parse(inputs[1]); // Ignore in the first league; Spend ten mana to cast a spell

            // enemy base stats
            inputs = Console.ReadLine().Split(' ');
            var enemyBaseHealth = int.Parse(inputs[0]); // Your base health
            var enemyMana = int.Parse(inputs[1]); // Ignore in the first league; Spend ten mana to cast a spell

            var entityCount = int.Parse(Console.ReadLine()); // Amount of heros and monsters you can see

            for (var i = 0; i < entityCount; i++)
            {
                inputs = Console.ReadLine().Split(' ');

                var id = int.Parse(inputs[0]); // Unique identifier
                var type = int.Parse(inputs[1]); // 0=monster, 1=your hero, 2=opponent hero
                var x = int.Parse(inputs[2]); // Position of this entity
                var y = int.Parse(inputs[3]);
                var shieldLife = int.Parse(inputs[4]); // Ignore for this league; Count down until shield spell fades
                var isControlled = int.Parse(inputs[5]); // Ignore for this league; Equals 1 when this entity is under a control spell
                var health = int.Parse(inputs[6]); // Remaining health of this monster
                var vx = int.Parse(inputs[7]); // Trajectory of this monster
                var vy = int.Parse(inputs[8]);
                var nearBase = int.Parse(inputs[9]); // 0=monster with no target yet, 1=monster targeting a base
                var threatFor = int.Parse(inputs[10]); // Given this monster's trajectory, is it a threat to 1=your base, 2=your opponent's base, 0=neither

                if (type == 0)
                {
                    ThreatFor threatForEnum;

                    switch (threatFor)
                    {
                        case 0:
                            threatForEnum = ThreatFor.None;
                            break;
                        case 1:
                            threatForEnum = ThreatFor.Player;
                            break;
                        case 2:
                            threatForEnum = ThreatFor.Enemy;
                            break;
                        default:
                            threatForEnum = ThreatFor.None;
                            break;
                    }

                    monsters.Add(new Monster(id, new Point(x, y), health, vx, vy, nearBase != 0, threatForEnum, isControlled == 1, shieldLife));
                }
                else
                {
                    var hero = new Hero(id, new Point(x, y), isControlled == 1, shieldLife);

                    if (type == 1)
                    {
                        game.UpdatePlayerHero(hero);
                    }
                    else
                    {
                        enemyHeroes.Add(hero);
                    }
                }
            }

            var moves = game.GetMoves(enemyHeroes, monsters, playerMana);

            for (var i = 0; i < moves.Length; i++)
            {
                // Write an action using Console.WriteLine()
                // To debug: Console.Error.WriteLine("Debug messages...");

                // In the first league: MOVE <x> <y> | WAIT; In later leagues: | SPELL <spellParams>;
                Console.WriteLine(moves[i]);
            }
        }
    }
}


internal sealed class PossibleAction
{
    internal int HeroId { get; }
    internal int Priority { get; }
    internal ActionType ActionType { get; }
    internal EntityType EntityType { get; }
    internal int? TargetId { get; }
    internal int? TargetXPos { get; }
    internal int? TargetYPos { get; }

    internal PossibleAction(int heroId, int priority, ActionType actionType, EntityType entityType, int? targetId, int? targetXPos, int? targetYPos)
    {
        HeroId = heroId;
        Priority = priority;
        ActionType = actionType;
        EntityType = entityType;
        TargetId = targetId;
        TargetXPos = targetXPos;
        TargetYPos = targetYPos;
    }
}


internal sealed class SpellGenerator
{
    private readonly Point _playerBaseLocation;
    private readonly Point _enemyBaseLocation;
    private readonly ValuesProvider _valuesProvider;

    public SpellGenerator(Point playerBaseLocation,
                          Point enemyBaseLocation,
                          ValuesProvider valuesProvider)
    {
        _playerBaseLocation = playerBaseLocation;
        _enemyBaseLocation = enemyBaseLocation;
        _valuesProvider = valuesProvider;
    }

    internal void CastProtectiveShieldSpells(IEnumerable<Hero> playerHeroes, Strategy strategy, ActionManager actionManager)
    {
        foreach (var hero in playerHeroes.Where(h => h.Strategy == strategy))
        {
            if (hero.ShieldLife == 0)
            {
                actionManager.AddPossibleAction(hero.Id, 90, ActionType.ShieldSpell, EntityType.Hero, hero.Id, null, null);
                PerformSpell(hero);

                hero.IsShielding = true;
            }
        }
    }

    internal void AssignDefensiveWindSpell(List<Hero> playerHeroes, IEnumerable<Monster> monsters, ActionManager actionManager)
    {
        var closeDistance = 3000;

        var closestMonster = monsters.Where(m => m.ShieldLife == 0)
                                                         .Select(m => new { m, distance = CalculateDistance(m.Position, _playerBaseLocation)})
                                                         .Where(m => m.distance <= closeDistance)
                                                         .OrderBy(m => m.distance)
                                                         .Select(m => m.m)
                                                         .FirstOrDefault();

        if (closestMonster != null)
        {
            var availableHeroes = playerHeroes.Where(h => h.Strategy == Strategy.Defend && h.IsShielding == false).ToList();

            Console.Error.WriteLine($"availableHeroes.Count:{availableHeroes.Count}");

            if (availableHeroes.Count > 0)
            {
                var closestHero = availableHeroes.OrderBy(h => CalculateDistance(h.Position, closestMonster.Position))
                                                 .First();

                Console.Error.WriteLine($"closestHero:{closestHero.Id}");
                Console.Error.WriteLine($"closestMonster:{closestMonster.Id}");

                if (CalculateDistance(closestHero.Position, closestMonster.Position) <= ValuesProvider.WindSpellRange)
                {
                    Console.Error.WriteLine("CloseEnough");
                    actionManager.AddPossibleAction(closestHero.Id, 60, ActionType.WindSpell, EntityType.None, null, _enemyBaseLocation.X, _enemyBaseLocation.Y);
                    PerformSpell(closestHero);
                }
                else
                {
                    Console.Error.WriteLine("Not close enough");
                    // Too far away for wind to work

                    // If he's close and we can control that little shit away do it
                    if (CalculateDistance(closestMonster.Position, _playerBaseLocation) <= _valuesProvider.CloseToBaseRange
                        && CalculateDistance(closestHero.Position, closestMonster.Position) <= _valuesProvider.ControlSpellange)
                    {
                        actionManager.AddPossibleAction(closestHero.Id, 60, ActionType.ControlSpell, EntityType.Monster, closestMonster.Id, _enemyBaseLocation.X, _enemyBaseLocation.Y);
                        PerformSpell(closestHero);
                    }
                }
            }
        }
    }

    internal void AssignDefenderControlSpells(IEnumerable<Hero> playerHeroes, IEnumerable<Monster> monsters, ActionManager actionManager)
    {
        const int healthCutOff = 10;

        var defendingHeroesOutsideOfBase =
            playerHeroes.Where(h => h.Strategy == Strategy.Defend
                                      && h.IsShielding == false
                                      && CalculateDistance(h.Position, _playerBaseLocation) > _valuesProvider.BaseRadius);

        foreach (var defendingHeroOutsideOfBase in defendingHeroesOutsideOfBase)
        {
            var monsterWithinSpellRange =
                monsters.Where(m => m.Health > healthCutOff
                                        && m.IsControlled == false
                                        && m.ThreatFor == ThreatFor.Player
                                        && m.ShieldLife == 0
                                        && CalculateDistance(m.Position, _playerBaseLocation) > _valuesProvider.BaseRadius)
                        .Select(m => new { m, distance = CalculateDistance(m.Position, defendingHeroOutsideOfBase.Position)})
                        .Where(m => m.distance <= _valuesProvider.ControlSpellange)
                        .OrderBy(m => m.distance)
                        .Select(m => m.m)
                        .FirstOrDefault();

            if (monsterWithinSpellRange != null)
            {
                actionManager.AddPossibleAction(defendingHeroOutsideOfBase.Id, 60, ActionType.ControlSpell, EntityType.Monster, monsterWithinSpellRange.Id, _enemyBaseLocation.X, _enemyBaseLocation.Y);
                PerformSpell(defendingHeroOutsideOfBase);
            }
        }
    }

    internal void AssignAttackSpells(IEnumerable<Hero> playerHeroes, IEnumerable<Hero> enemyHeroes, IEnumerable<Monster> monsters, ActionManager actionManager)
    {
        foreach (var attackingHero in playerHeroes.Where(h => h.Strategy == Strategy.Attack))
        {
            if (CalculateDistance(attackingHero.Position, _enemyBaseLocation) > _valuesProvider.OutskirtsMaxDist)
            {
                continue;
            }

            var closeEnoughForWindMonster = monsters.FirstOrDefault(m => CalculateDistance(m.Position, attackingHero.Position) <= ValuesProvider.WindSpellRange
                                                                                 && m.ShieldLife == 0);

            if (closeEnoughForWindMonster != null)
            {
                actionManager.AddPossibleAction(attackingHero.Id, 40, ActionType.WindSpell, EntityType.None, null, _enemyBaseLocation.X, _enemyBaseLocation.Y);

                PerformSpell(attackingHero);
            }
            else // If we're not close enough for a wind spell try a shield or control
            {
                var closeEnoughForControlEnemy =
                        enemyHeroes.Where(e => e.ShieldLife == 0
                                                 && CalculateDistance(e.Position, attackingHero.Position) <= _valuesProvider.ControlSpellange
                                                 && CalculateDistance(e.Position, _enemyBaseLocation) <= _valuesProvider.BaseRadius)
                                   .OrderBy(e => CalculateDistance(e.Position, _enemyBaseLocation))
                                   .FirstOrDefault();

                var closeEnoughForSpellMonster =
                        monsters.FirstOrDefault(m => m.ShieldLife == 0
                                                         && m.ThreatFor == ThreatFor.Enemy
                                                         && CalculateDistance(m.Position, attackingHero.Position) <= _valuesProvider.ShieldSpellRange
                                                         && CalculateDistance(m.Position, _enemyBaseLocation) <= _valuesProvider.OutskirtsMinDist);

                if (closeEnoughForControlEnemy != null && closeEnoughForSpellMonster != null)
                {
                    if (new Random().Next(1) == 0)
                    {
                        actionManager.AddPossibleAction(attackingHero.Id, 40, ActionType.ShieldSpell, EntityType.Monster, closeEnoughForSpellMonster.Id, null, null);
                        PerformSpell(attackingHero);
                    }
                    else
                    {
                        actionManager.AddPossibleAction(attackingHero.Id, 40, ActionType.ControlSpell, EntityType.Monster, closeEnoughForSpellMonster.Id, _playerBaseLocation.X, _playerBaseLocation.Y);
                        PerformSpell(attackingHero);
                    }
                }
                else if (closeEnoughForSpellMonster != null)
                {
                    actionManager.AddPossibleAction(attackingHero.Id, 40, ActionType.ShieldSpell, EntityType.Monster, closeEnoughForSpellMonster.Id, null, null);
                    PerformSpell(attackingHero);
                }
                else if (closeEnoughForControlEnemy != null)
                {
                    actionManager.AddPossibleAction(attackingHero.Id, 40, ActionType.ControlSpell, EntityType.Enemy, closeEnoughForControlEnemy.Id, _playerBaseLocation.X, _playerBaseLocation.Y);

                    PerformSpell(attackingHero);
                }
            }
        }
    }

    private void PerformSpell(Hero hero)
    {
        hero.CurrentMonster = -1;
    }
    
    private static double CalculateDistance(Point position, Point position2)
    {
        return Math.Sqrt(Math.Pow(position.X - position2.X, 2)
                         + Math.Pow(position.Y - position2.Y, 2));
    }
}


internal enum Strategy
{
    Defend,
    Attack,
    Collect
}


internal enum ThreatFor
{
    None,
    Player,
    Enemy
}

internal sealed class ValuesProvider
{
    public int XMax => 17630;
    public int YMax => 9000;

    public static int WindSpellRange => 1280;
    public int ControlSpellange => 2200;
    public int ShieldSpellRange => 2200;

    public int OutskirtsMinDist => 5000;
    public int OutskirtsMaxDist => 7000;
    public int HeroRange => 2200;
    public int MaxDefenderDistanceFromBase => 9000;
    public int BaseRadius => 5000;
    public int CloseToBaseRange => 1000;
}

/**************************************************************
  This file was generated by FileConcatenator.
  It combined all classes in the project to work in Codingame.
***************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Drawing;
using System.IO;
using System.Collections;

internal sealed class Game
{
    public int Resources { get; private set; }
    internal List<Tube> Tubes { get; private set; }
    internal List<Teleporter> Teleporters { get; private set; }
    internal List<Pod> Pods { get; private set; }
    public List<LandingPad> LandingPads { get; private set; }
    public List<Module> Modules { get; private set; }

    internal void SetResources(int resources) => Resources = resources;

    internal void SetTubes(List<Tube> tubes) => Tubes = tubes;

    internal void SetTubes(List<Teleporter> teleporters) => Teleporters = teleporters;

    internal void SetPods(List<Pod> pods) => Pods = pods;

    internal void SetLandingPads(List<LandingPad> landingPads) => LandingPads = landingPads;

    internal void SetModules(List<Module> modules) => Modules = modules;

    // TUBE | UPGRADE | TELEPORT | POD | DESTROY | WAIT
    // Example - "TUBE 0 1;TUBE 0 2;POD 42 0 1 0 2 0 1 0 2"
    internal string GetActions()
    {
        if (Tubes.Count == 0)
        {
            return "TUBE 0 1;TUBE 0 2;POD 42 0 1 0 2 0 1 0 2";
        }
        else
        {
            return "UPGRADE 0 1;UPGRADE 0 2";
        }
    }
}


internal sealed class LandingPad(int id, Point position, int[] astronauts)
{
    internal int Id { get; } = id;
    internal Point Position { get; } = position;
    internal int[] Astronauts { get; } = astronauts;
}


internal sealed class Module(int id, int type, Point position)
{
    internal int Id { get; } = id;
    public int Type { get; } = type;
    internal Point Position { get; } = position;
}


class Player
{   
    static void Main(string[] args)
    {
        Game game = new Game();

        // game loop
        while (true)
        {
            int resources = int.Parse(Console.ReadLine());
            game.SetResources(resources);

            ParseTravelRoutes(game);
            ParsePods(game);
            ParseBuildings(game);

            string actions = game.GetActions();

            // Write an action using Console.WriteLine()
            // To debug: Console.Error.WriteLine("Debug messages...");

            Console.WriteLine(actions);
        }
    }

    private static void ParseTravelRoutes(Game game)
    {
        List<Tube> tubes = new List<Tube>();
        List<Teleporter> teleporters = new List<Teleporter>();

        int numTravelRoutes = int.Parse(Console.ReadLine());

        for (int i = 0; i < numTravelRoutes; i++)
        {
            string[] inputs = Console.ReadLine().Split(' ');
            int buildingId1 = int.Parse(inputs[0]);
            int buildingId2 = int.Parse(inputs[1]);
            int capacity = int.Parse(inputs[2]);

            if (capacity == 0)
            {
                teleporters.Add(new Teleporter(buildingId1, buildingId2));

            }
            else
            {
                tubes.Add(new Tube(buildingId1, buildingId2, capacity));
            }
        }

        game.SetTubes(tubes);
    }

    private static void ParsePods(Game game)
    {
        List<Pod> pods = new List<Pod>();
        int numPods = int.Parse(Console.ReadLine());
        for (int i = 0; i < numPods; i++)
        {
            string podProperties = Console.ReadLine();

            string[] properties = podProperties.Split(" ");

            int[] path = new int[properties.Length - 2];

            for (int j = 0; j < path.Length; j++)
            {
                path[j] = int.Parse(properties[j + 2]);
            }

            pods.Add(new Pod(int.Parse(properties[0]), int.Parse(properties[1]), path));
        }

        game.SetPods(pods);
    }

    private static void ParseBuildings(Game game)
    {
        List<Module> modules = new List<Module>();
        List<LandingPad> landingPads = new List<LandingPad>();

        int numNewBuildings = int.Parse(Console.ReadLine());
        for (int i = 0; i < numNewBuildings; i++)
        {
            string buildingProperties = Console.ReadLine();

            string[] props = buildingProperties.Split(" ");

            int type = int.Parse(props[0]);
            int id = int.Parse(props[1]);
            Point position = new Point(int.Parse(props[2]), int.Parse(props[3]));

            if (type == 0)
            {
                int[] astronauts = new int[props.Length - 4];

                for (int j = 0; j < astronauts.Length; j++)
                {
                    astronauts[j] = int.Parse(props[j + 4]);
                }

                landingPads.Add(new LandingPad(id, position, astronauts));
            }
            else
            {
                modules.Add(new Module(id, type, position));
            }
        }

        game.SetLandingPads(landingPads);
        game.SetModules(modules);
    }
}


internal sealed class Pod(int id, int numberOfStops, int[] path)
{
    internal int Id { get; private set; } = id;
    internal int NumberOfStops { get; private set; } = numberOfStops;
    internal int[] Path { get; private set; } = path;
}

internal sealed class Teleporter(int building1Id, int building2Id)
{
    public int Building1Id { get; private set; } = building1Id;
    public int Building2Id { get; private set; } = building2Id;
}



internal sealed class Tube(int building1Id, int building2Id, int capacity)
{
    public int Building1Id { get; private set; } = building1Id;
    public int Building2Id { get; private set; } = building2Id;
    public int Capacity { get; private set; } = capacity;
}




namespace FileConcatenator;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

internal sealed class Program
{
    static void Main(string[] args)
    {
        if (args.Length != 1)
        {
            return;
        }
            
        var destinationFile = $"{args[0]}/Combined.cs";
            
        if (File.Exists(destinationFile))
        {
            File.Delete(destinationFile);
        }

        var filesToParse = GetSourceFileNames(args[0]).ToList();

        var usings = new List<string>();
        var classes = new List<string>();

        foreach (var fileToParse in filesToParse)
        {
            if (Path.GetFileName(fileToParse) == "AssemblyInfo.cs")
                continue;

            var (fileUsings, fileContents) = GetClassContents(fileToParse);
                
            usings.AddRange(fileUsings);
            classes.Add(fileContents);
        }

        usings = usings.Distinct().ToList();

        CreateFile(destinationFile, usings, classes);
    }
        
    private static IEnumerable<string> GetSourceFileNames(string solutionFilePath)
    {
        var files = Directory.GetFiles(solutionFilePath, "*.cs", SearchOption.AllDirectories);

        return files.Where(f => !f.Contains("\\obj\\")); // Exclude anything in obj
    }

    private static string GetNameSpace(string file)
    {
        var text = File.ReadAllText(file);

        var startLocation = text.IndexOf("namespace", StringComparison.Ordinal) + 10;

        var endLocation = text.IndexOf("\r\n", startLocation, StringComparison.Ordinal);

        return text.Substring(startLocation, endLocation-startLocation);
    }

    private static (List<string> usings, string content) GetClassContents(string fileToParse)
    {
        var usings = new List<string>();

        var text = File.ReadAllText(fileToParse);

        var blockIndex = text.IndexOf("class");
        if (blockIndex == -1)
        {
            blockIndex = text.IndexOf("enum");
        }
        if (blockIndex == -1)
        {
            blockIndex = text.IndexOf("struct");
        }

        var blockStart = text.Substring(0, blockIndex).LastIndexOf("\n");

        var blockContent = text.Substring(blockStart + 1);

        // Get usings
        var index = 0;
        var usingsFinished = false;

        while (!usingsFinished)
        {
            var usingStartIndex = text.Substring(0, blockStart).IndexOf("using", index, StringComparison.Ordinal);

            if (usingStartIndex == -1)
            {
                usingsFinished = true;
                continue;
            }
            var usingEndIndex = text.IndexOf(";", usingStartIndex, StringComparison.Ordinal);
            index = usingEndIndex;

            usings.Add(text.Substring(usingStartIndex, usingEndIndex - usingStartIndex + 1));
        }

        return (usings, blockContent);
    }
        
    private static void CreateFile(string destinationFile, List<string> usings, List<string> classes)
    {
        File.Create(destinationFile).Close();

        using var textWriter = new StreamWriter(destinationFile);
            
        // Add comments
        textWriter.WriteLine("/**************************************************************");
        textWriter.WriteLine("  This file was generated by FileConcatenator.");
        textWriter.WriteLine("  It combined all classes in the project to work in Codingame.");
        textWriter.WriteLine("***************************************************************/");
        textWriter.WriteLine();

        // Add usings
        foreach (var classUsing in usings)
        {
            textWriter.WriteLine(classUsing);
        }

        textWriter.WriteLine();

        foreach (var projectClass in classes)
        {
            textWriter.Write(projectClass);
            textWriter.WriteLine();
            textWriter.WriteLine();
        }
            
    }
}

